rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - Allow users to create and manage their own profiles
    match /users/{userId} {
      allow read: if request.auth != null; // All authenticated users can read profiles
      allow write: if request.auth != null && request.auth.uid == userId; // Users can only write their own profile
      allow create: if request.auth != null && request.auth.uid == userId; // Users can create their own profile
    }
    
    // Events collection - Enhanced with popularity protection
    match /events/{eventId} {
      allow read: if request.auth != null; // All authenticated users can read events
      allow create: if request.auth != null && 
        // Prevent setting popularity fields on creation
        !request.resource.data.keys().hasAny([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ]);
      allow update: if request.auth != null && (
        // Users can update most fields EXCEPT popularity fields
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ])) ||
        // OR allow cloud functions to update ONLY popularity fields (no auth context)
        (request.auth == null && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ]))
      );
      allow delete: if request.auth != null; // Only authenticated users can delete events
    }
    
    // Check-ins collection - Enhanced with location validation requirements
    match /checkIns/{checkInId} {
      allow read: if request.auth != null; // All authenticated users can see check-ins
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'eventId', 'checkedInAt', 'isActive']) &&
        request.resource.data.isActive == true; // Must be active when created
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // Only allow updating isActive and checkedOutAt fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'checkedOutAt']);
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.participants);
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      allow write: if request.auth != null && 
        (request.auth.uid in resource.data.participants);
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read, write: if request.auth != null; // Simplified for now
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
    }
    
    // Places collection - Enhanced with popularity protection
    match /places/{placeId} {
      allow read: if request.auth != null; // All authenticated users can read places
      allow create: if request.auth != null && 
        // Prevent setting popularity fields on creation
        !request.resource.data.keys().hasAny([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ]);
      allow update: if request.auth != null && (
        // Users can update most fields EXCEPT popularity fields
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ])) ||
        // OR allow cloud functions to update ONLY popularity fields (no auth context)
        (request.auth == null && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'popularityScore', 'recentCheckIns', 'weeklyCheckIns', 'totalCheckIns', 'popularityUpdatedAt'
        ]))
      );
      allow delete: if request.auth != null; // Only authenticated users can delete places
    }
  }
}
